name: Data Pipeline

# Manual trigger only
on:
  workflow_dispatch:
    inputs:
      region:
        description: 'Region to process'
        required: true
        type: choice
        options:
          - sf_bay
          - nyc
          - london
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - staging
          - production
      batch_size:
        description: 'Batch size for processing'
        required: false
        type: number
        default: 50
      max_features:
        description: 'Maximum features to process (leave empty for all)'
        required: false
        type: number
      test_mode:
        description: 'Run in test mode (limits to 50 features)'
        required: false
        type: boolean
        default: false
      sports:
        description: 'Sports to fetch (comma-separated)'
        required: false
        type: string
        default: 'basketball,tennis,soccer,volleyball,pickleball'
      test_bbox:
        description: 'Test bounding box (south,west,north,east) - leave empty for full region'
        required: false
        type: string

jobs:
  data-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours max
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          cd data_enrichment
          pip install -r requirements.txt
      
      - name: Run database migrations
        run: |
          cd backend
          npm install
          # Add SSL parameters to DATABASE_URL for cloud databases
          DATABASE_URL_WITH_SSL="${{ secrets[format('{0}_DATABASE_URL', github.event.inputs.environment || 'staging')] }}?sslmode=require"
          DATABASE_URL="$DATABASE_URL_WITH_SSL" npm run migrate
        env:
          DATABASE_URL: ${{ secrets[format('{0}_DATABASE_URL', github.event.inputs.environment)] }}
      
      - name: Create database backup
        run: |
          # Create backup before processing
          # Use manual trigger inputs
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          REGION="${{ github.event.inputs.region }}"
          cd data_enrichment
          # Set SSL environment variable for psycopg2
          export PGSSLMODE=require
          python scripts/create_backup.py \
            --environment $ENVIRONMENT \
            --region $REGION
        env:
          DATABASE_URL: ${{ secrets[format('{0}_DATABASE_URL', github.event.inputs.environment)] }}
          PGSSLMODE: require
      
      - name: Fetch court data from Overpass API
        run: |
          cd data_enrichment
          # Use manual trigger inputs
          SPORTS="${{ github.event.inputs.sports }}"
          TEST_BBOX="${{ github.event.inputs.test_bbox }}"
          REGION="${{ github.event.inputs.region }}"
          
          echo "üîç Fetching court data from Overpass API"
          echo "  Region: $REGION"
          echo "  Sports: $SPORTS"
          echo "  Test bbox: ${TEST_BBOX:-'(using full region)'}"
          
          # Build fetch command
          if [ -n "$TEST_BBOX" ]; then
            python fetch_courts_data.py \
              --bbox "$TEST_BBOX" \
              --sports "$SPORTS" \
              --output export.geojson
          else
            python fetch_courts_data.py \
              --region "$REGION" \
              --sports "$SPORTS" \
              --output export.geojson
          fi
      
      - name: Run data pipeline
        run: |
          cd data_enrichment
          # Use manual trigger inputs
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          REGION="${{ github.event.inputs.region }}"
          BATCH_SIZE="${{ github.event.inputs.batch_size }}"
          MAX_FEATURES="${{ github.event.inputs.max_features }}"
          TEST_MODE="${{ github.event.inputs.test_mode }}"
          # Set SSL environment variable for psycopg2
          export PGSSLMODE=require
          
          # Debug: Print the actual values being used
          echo "üîç Debug - Workflow Input Values:"
          echo "  Environment: $ENVIRONMENT"
          echo "  Region: $REGION"
          echo "  Batch Size: $BATCH_SIZE"
          echo "  Max Features: $MAX_FEATURES"
          echo "  Test Mode: $TEST_MODE"
          echo "  Test Mode Type: $(echo $TEST_MODE | od -c)"
          # Run the clustered pipeline for better API efficiency
          python run_full_pipeline.py \
            --connection-string ${{ secrets[format('{0}_DATABASE_URL', github.event.inputs.environment)] }} \
            --batch-size $BATCH_SIZE \
            ${{ github.event.inputs.max_features && format('--max-features {0}', github.event.inputs.max_features) || '' }} \
            ${{ github.event.inputs.test_mode == 'true' && '--test-mode' || '' }}
        env:
          DATABASE_URL: ${{ secrets[format('{0}_DATABASE_URL', github.event.inputs.environment)] }}
          PGSSLMODE: require
      
      - name: Validate data quality
        id: validate-data-quality
        run: |
          # Use manual trigger inputs
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          REGION="${{ github.event.inputs.region }}"
          cd data_enrichment
          # Set SSL environment variable for psycopg2
          export PGSSLMODE=require
          python scripts/validate_data_quality.py \
            --environment $ENVIRONMENT \
            --region $REGION
        env:
          DATABASE_URL: ${{ secrets[format('{0}_DATABASE_URL', github.event.inputs.environment)] }}
          PGSSLMODE: require
        continue-on-error: true
      
      - name: Auto-rollback on quality failure
        if: failure() && steps.validate-data-quality.outcome == 'failure'
        run: |
          # Use manual trigger inputs
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          REGION="${{ github.event.inputs.region }}"
          cd data_enrichment
          # Set SSL environment variable for psycopg2
          export PGSSLMODE=require
          echo "üîÑ Data quality validation failed - initiating automatic rollback"
          python scripts/rollback.py \
            --environment $ENVIRONMENT \
            --region $REGION
        env:
          DATABASE_URL: ${{ secrets[format('{0}_DATABASE_URL', github.event.inputs.environment)] }}
          PGSSLMODE: require
      
      - name: Notify success
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const region = '${{ github.event.inputs.region }}';
            const environment = '${{ github.event.inputs.environment }}';
            
            console.log(`‚úÖ Data pipeline completed successfully!`);
            console.log(`   Region: ${region}`);
            console.log(`   Environment: ${environment}`);
            
            // You can add more sophisticated success notifications here
      
      - name: Rollback on failure
        if: failure()
        run: |
          # Use manual trigger inputs
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          REGION="${{ github.event.inputs.region }}"
          cd data_enrichment
          # Set SSL environment variable for psycopg2
          export PGSSLMODE=require
          python scripts/rollback.py \
            --environment $ENVIRONMENT \
            --region $REGION
        env:
          DATABASE_URL: ${{ secrets[format('{0}_DATABASE_URL', github.event.inputs.environment)] }}
          PGSSLMODE: require
      
      - name: Notify failure
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const region = '${{ github.event.inputs.region }}';
            const environment = '${{ github.event.inputs.environment }}';
            
            console.log(`‚ùå Data pipeline failed!`);
            console.log(`   Region: ${region}`);
            console.log(`   Environment: ${environment}`);
            console.log(`   Check the logs above for details.`);
            
            // You can add more sophisticated failure notifications here